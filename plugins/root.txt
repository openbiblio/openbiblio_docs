= Managing OpenBiblio Plugins

OpenBiblio has a very flexible plugin system. This document will describe how you can 
enable and disable plugins, understand the plugins that are included with OpenBiblio,
and design a new plugin.

== Enabling plugins

TIP: You will need access to the Tools menu.

. Go to Tools -> Plugin Manager.
. Make sure that Plugins are Allowed.
. Check the box next to each plugin you are interested in using.

== Plugins bundled with OpenBiblio

These plugins all come bundled with a default OpenBiblio installation.

include::cssUtils.txt[]

include::listMgr.txt[]

include::mediaFields.txt[]

include::orphanFiles.txt[]

include::transUtils.txt[]

include::callNoUtils.txt[]


== Creating a new plugin

This requires basic PHP skills and access to the files.

=== Design the plugin

. Create a new directory that begins with the word plugin, followed by an underscore, followed by the name of your plugin.  In UNIX systems, you might type something like this:
+
[source,bash]
----
mkdir plugin_excitingPlugin
----
+
. If you need to include custom CSS or JS, add it to a file called custom_head.php in this new directory.
. Create three PHP files in the directory: a JS file, a Srvr file, and a Forms file.

==== Create a plugin form

Your users will interact with your plugin using a form, located at `plugin_excitingPlugin/excitingForms.php`.

A basic plugin consists of a require statement to get the necessary methods, some code establishing
basic UI, some HTML form markup, and a section to display results and messages.
Here's a simple example:

[source,php]
----
<?php
  require_once("../shared/common.php");

  $tab = "tools";
  $nav = "ExcitingMgr";

  require_once(REL(__FILE__, "../shared/logincheck.php"));
  Page::header(array('nav'=>$tab.'/'.$nav, 'title'=>''));

?>
<h1 id="pageHdr" class="title"><?php echo T("excitingMgr"); ?></h1>
    <section>
        <fieldset id="exciting">
            <label for="site_cd" >Choose your favorite library:<select id="site_cd" ></select></label>
            <input type="button" id="showResultsBtn" value="Show results" />
        </fieldset>
    </section>
    <div id="rslts"></div>

<?php
require_once(REL(__FILE__, "excitingJs.php"));
?>
----

==== Create a plugin JS file

Your plugin's JS file -- located at `plugin_excitingPlugin/excitingJs.php` -- is responsible for
filling your Form with dynamic data, whether it is filling drop-down menus or presenting the results
of your query from the server.

A basic JS file consists of functions that capture data from the user and send it to the server file(s).
Here's a simple example:

[source,html]
----
<script language="JavaScript" defer>
"use strict";

var excite = {
        init: function () {
                excite.url = 'excitingSrvr.php';
                excite.listSrvr = "../shared/listSrvr.php";
		excite.fetchSiteList();

                $('#showResultsBtn').on('click',null,excite.doSendUserData);
        },
        fetchSiteList: function () {
                $.getJSON(excite.listSrvr,{mode:'getSiteList'}, function(data){
                var html = '';
                for (var n in data) {
                    html+= '<option value="'+n+'">'+data[n]+'</option>';
                }
                $('#site_cd').html(html);
                });
        },
        doSendUserData: function () {
                $.post(excite.url, {'mode':$("#site_cd").val()},
                        function (response) {
                                $('#rslts').html(response);
                                $('#rslts').show();
                });

        },
};
$(document).ready(excite.init);

</script>
----

==== Create a plugin server

Your plugin's server -- located at `plugin_excitingPlugin/excitingSrvr.php` -- is responsible
for three tasks:

. Performing any actions the user requests.
. Obtaining any relevant data from the database, file structure, or external API.
. Preparing a nice HTML display of the relevant data, which your JS file will add to the Form to
display to your user. 

A basic plugin server consists of a require statement to get the necessary data and methods and a 
switch statement to take care of the `$_POST['mode']` variable. Here's a simple example:

[source,php]
----
<?php
	require_once('../shared/common.php');
	switch ($_POST['mode']){
		case 1:
			echo 'That\'s my favorite library too!';
			break;
		case 2:
			echo 'That library is pretty good.';
			break;
		default:
			echo T('invalid mode');
			break;
	}
----

NOTE: If you would like to follow OpenBiblio style and serve up JSON from your Server to be processed
by your JS file, be sure to use POST requests, rather than GET requests, to avoid the potential of
Javascript Hijacking.

If you would like to access data from the database, you should require the appropriate model from the
model directory.  For example, if you'd like to use the Biblios model, you would include this in your
plugin_excitingPlugin/excitingSrvr.php:

[source,php]
----
require_once('../model/Biblios.php');
$bib = new Biblios;
----

You can then access all those great methods and data through the `$bib` object.


=== Add your plugin to the OpenBiblio menu

. Create a new directory inside the plugins directory with the name of your plugin.  In UNIX systems, you might type something like this:
+
[source,bash]
----
mkdir plugins/excitingPlugin
----
+
. Create a file within this new directory called nav.nav
+
[source,php]
----
<?php
Nav::node('tools/excitingPlugin', 'Exciting Plugin', '../plugin_excitingPlugin/excitingForms.php');
----
+
. If you'd like to use Obib's localization framework but need to localize some more terms, create a file called tran.tran. You can use this to add new terms to your locale.
+
TIP: Plugins already have all of the exciting localization ability built in.  However, note that you cannot override localized term definitions within tran.tran.
+
WARNING: There is not yet a place to specify localized terms for plugins.
+
. Turn on your plugin using Tools -> Plugin Manager.

